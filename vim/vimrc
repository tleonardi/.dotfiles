filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'Vim-R-plugin'
Plugin 'lervag/vimtex'
call vundle#end()            " required
filetype plugin indent on    " required

let vimrplugin_r_path = "/homes/tl344/tom/bin/bobR.sh"

" Remap autocompletion to ctrl-space
inoremap <Nul> <C-n>

" Do not connect to the X server to get window title
" and clipboard. This dramatically speeds up vi startup
set clipboard=exclude:.*

" Remap SendSelection and Sendline to Leader-Space
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

" Allow backspace to delete indents, eol or before the start of insert
set backspace=indent,eol,start

" Set leader and local leader
let maplocalleader = "\\"
let mapleader = ","

" Disable the automatic replacement of _ with <- This is to avoid problems
" when pasting code that contains _
let vimrplugin_assign = 0
" Wait for R to load before time out
let vimrplugin_vimcom_wait = 60000

" Highlight searches
set hlsearch

" Line numbers
set nu

" Highlight search pattern as you type
set incsearch

" Makes mouse scrolling and selecting work
set mouse=a
" Allow mouse clicks past the 220th column
set ttymouse=sgr

" Solarized color theme
syntax enable
set background=light
let g:solarized_termtrans=1
colorscheme solarized

" My mappings 
" Disable the arrows so that i stick my hands to the home row
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>

inoremap jj <esc>

" If you press enter after a search the search pattern is cleared
nnoremap <CR> :noh<CR><CR>

" Edit .vimrc in a split pane
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source .vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Toggle line numbers
nnoremap <leader>n :set nu!<cr>

" Toggle paste mode
nnoremap <leader>p :set paste!<cr>

" Spelling
set spelllang=en_gb
set spellfile=$HOME/.vim/spell/en.utf-8.add

let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
 let g:vimtex_view_general_options = '-r @line @pdf @tex'

 " This adds a callback hook that updates Skim after compilation
 let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
 function! UpdateSkim(status)
   if !a:status | return | endif

   let l:out = b:vimtex.out()
   let l:cmd = [g:vimtex_view_general_viewer, '-r']
   if !empty(system('pgrep Skim'))
     call extend(l:cmd, ['-g'])
   endif
   if has('nvim')
     call jobstart(l:cmd + [line('.'), l:out])
   elseif has('job')
     call job_start(l:cmd + [line('.'), l:out])
   else
     call system(join(l:cmd + [line('.'), shellescape(l:out)], ' '))
   endif
endfunction
